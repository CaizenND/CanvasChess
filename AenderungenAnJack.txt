+ Chess als Exercise Type hinzugefügt
	de.uni_due.s3.jack2.server.common.definitions.ExerciseType
	
+ Eigene Chess ExerciseManagerBean erstellt
	de.uni_due.s3.jack2.server.webfrontend.ChessExerciseManagerBean
	
+ ChessExerciseManagerBean in der faces-config.xml eingefügt
	==> Dadurch Referenz auf xhtml Seiten möglich 
	
+ Im de.uni_due.s3.jack2.server.webfrontend.ExerciseManagerBean 
	- in der Methode navigateToSubmitSolution ein Fall für Chess Aufgaben angelegt
	- in der Methode setSolution einen Fall für Chess Aufgaben angelegt

+ SubmitSolutionChessMC im webfrontend für emp erstellt

+ SolutionDetailChessMC im webfrontend für emp erstellt

+ de.uni_due.s3.jack2.server.core.instantcheckers.MultipleChoiceChecker
	- in der Methode doCheck Correctanswer Pattern auf choice Element (aktuelles Format) angepasst
		- feedback bei Korrekter Antwort auf correctanswer --> message gesetzt

+ Im Webfrontend --> Essen --> Template
	- Css und Javascript importiert
	
+ de.uni_due.s3.jack2.server.core.util.ChessMcSolutionHandler
	- Ruft den MCSolutionHandler auf

+ de.uni_due.s3.jack2.server.core.util.ChessMCDefinitionHandler
	- Extra Methode zum Auslesen der Config

+ de.uni_due.s3.jack2.server.webfrontend.StudExerciseManager
	- Eintragungen für ExerciseType spezifische Dinge
TODO:
	- Frage: Was sagt Position auf der SolutionDetail aus? (Unten in der Tabelle des Checkers)
	- ChessMC als Unterklasse von MC und doppelte Methoden entfernen
	- CSS für Game Controls in Jack
	- Freies Spiel
	- Sage process could not be initializzed Error wenn man ChessQuiz submittet
	- xml Elemente auf kleinschreibung anpassen
	- ChessEditor anpassen um XML Deklaration anzufügen
	- front end methoden kommentieren
	- Attribut hinzufügen --> Züge für schwarz ignorieren
	- Design der Seiten anpassen so das es hübsch aussieht (so wie Nils Mutter)
	- xhtml < escapen